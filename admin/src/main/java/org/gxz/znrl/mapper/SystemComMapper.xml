<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.gxz.znrl.mapper.SystemComMapper">

    <resultMap id="BaseResultMap" type="org.gxz.znrl.entity.newsystem.UserEntity">
        <!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. -->
        <id column="id" property="id" jdbcType="BIGINT" />
        <result column="create_time" property="createTime" jdbcType="VARCHAR" />
        <result column="email" property="email" jdbcType="VARCHAR" />
        <result column="password" property="password" jdbcType="VARCHAR" />
        <result column="phone" property="phone" jdbcType="VARCHAR" />
        <result column="realname" property="realname" jdbcType="VARCHAR" />
        <result column="salt" property="salt" jdbcType="VARCHAR" />
        <result column="status" property="status" jdbcType="VARCHAR" />
        <result column="username" property="username" jdbcType="VARCHAR" />
        <result column="roleName" property="roleName" jdbcType="VARCHAR" />
        <result column="orgName" property="orgName" jdbcType="VARCHAR" />
        <result column="professionName" property="professionName" jdbcType="VARCHAR" />
        <result column="org_id" property="orgId" jdbcType="BIGINT" />
        <result column="profession_id" property="professionId" jdbcType="BIGINT" />
    </resultMap>

    <sql id="Base_Column_List">
        <!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. -->
        id, create_time, email, password, phone, realname, salt, status, username, org_id ,profession_id
    </sql>

    <sql id="paging_top_sql">
		select * from (
	</sql>

    <sql id="paging_bottom_sql">
		) t where t.rownumber between #{beginRowIndex,jdbcType=INTEGER} and #{endRowIndex,jdbcType=INTEGER}
	</sql>

	<select id="findUsersList" parameterType="org.gxz.znrl.entity.newsystem.UserEntity" resultMap="BaseResultMap">
        <include refid="paging_top_sql"/>
        select a.id,
                to_char(a.create_time, 'yyyy-MM-dd') create_time,
                a.email,
                a.password,
                a.phone,
                a.realname,
                a.salt,
                a.status,
                a.username,
                t.description roleName,
                d.name orgName,
                e.name professionName,
                row_number() over(order by a.status desc) rownumber
        from security_user a
        left join ( select user_id, wm_concat(c.description) description
                        from SECURITY_USER_ROLE b,  SECURITY_ROLE c
                        where b.role_id = c.id
                        group by user_id ) t on id = t.user_id
        left join SECURITY_ORGANIZATION d on a.org_id = d.id
        left join SECURITY_PROFESSION e on a.profession_id = e.id
        where 1 = 1
        <if test="username != null">
            and a.username LIKE '%${username}%'
        </if>
        <if test="realname != null">
            and a.realname LIKE '%${realname}%'
        </if>
        <if test="email != null">
            and a.email = #{email,jdbcType=VARCHAR}
        </if>
        <if test="phone != null">
            and a.phone = #{phone,jdbcType=VARCHAR}
        </if>
        <include refid="paging_bottom_sql" />
	</select>

    <select id="findUsersByPageCnt" parameterType="org.gxz.znrl.entity.newsystem.UserEntity" resultType="java.lang.Integer">
        select  count(1)
        from security_user
        where 1=1
        <if test="username != null">
            and username LIKE '%${username}%'
        </if>
        <if test="realname != null">
            and realname LIKE '%${realname}%'
        </if>
        <if test="email != null">
            and email = #{email,jdbcType=VARCHAR}
        </if>
        <if test="phone != null">
            and phone = #{phone,jdbcType=VARCHAR}
        </if>
    </select>

    <select id="selectByPrimaryKey"  parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from security_user
        where id = #{id,jdbcType=BIGINT}
    </select>

    <insert id="insertUserInfo" parameterType="org.gxz.znrl.entity.User" >
        insert into security_user
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="createTime != null" >
                create_time,
            </if>
            <if test="email != null" >
                email,
            </if>
            <if test="password != null" >
                password,
            </if>
            <if test="phone != null" >
                phone,
            </if>
            <if test="realname != null" >
                realname,
            </if>
            <if test="salt != null" >
                salt,
            </if>
            <if test="status != null" >
                status,
            </if>
            <if test="username != null" >
                username,
            </if>
            <if test="orgId != null" >
                org_id,
            </if>
            <if test="professionId != null" >
                profession_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=BIGINT},
            </if>
            <if test="createTime != null" >
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="email != null" >
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="password != null" >
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="phone != null" >
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="realname != null" >
                #{realname,jdbcType=VARCHAR},
            </if>
            <if test="salt != null" >
                #{salt,jdbcType=VARCHAR},
            </if>
            <if test="status != null" >
                #{status,jdbcType=VARCHAR},
            </if>
            <if test="username != null" >
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="orgId != null" >
                #{orgId,jdbcType=BIGINT},
            </if>
            <if test="professionId != null" >
                #{professionId,jdbcType=BIGINT},
            </if>
        </trim>
    </insert>

    <insert id="insertUserPlainTextInfo" parameterType="org.gxz.znrl.entity.UserPlaintext" >
        insert into SECURITY_USER_PLAINTEXT
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                ID,
            </if>
            <if test="username != null" >
                USERNAME,
            </if>
            <if test="password != null" >
                PASSWORD,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=DECIMAL},
            </if>
            <if test="username != null" >
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null" >
                #{password,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>

    <insert id="insertUserRoleInfo" parameterType="org.gxz.znrl.entity.UserRole" >
        insert into security_user_role
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="priority != null" >
                priority,
            </if>
            <if test="roleId != null" >
                role_id,
            </if>
            <if test="userId != null" >
                user_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=BIGINT},
            </if>
            <if test="priority != null" >
                #{priority,jdbcType=INTEGER},
            </if>
            <if test="roleId != null" >
                #{roleId,jdbcType=BIGINT},
            </if>
            <if test="userId != null" >
                #{userId,jdbcType=BIGINT},
            </if>
        </trim>
    </insert>

    <delete id="deleteUserRoleInfo" parameterType="java.lang.Long" >
        delete from security_user_role
        where user_id = #{userId,jdbcType=BIGINT}
    </delete>

    <update id="updateByPrimaryKeySelective" parameterType="org.gxz.znrl.entity.User" >
        update security_user
        <set >
            <if test="createTime != null" >
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="email != null and email != ''" >
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="password != null and password != ''" >
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="phone != null and phone != ''" >
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="realname != null and realname != ''" >
                realname = #{realname,jdbcType=VARCHAR},
            </if>
            <if test="salt != null and salt != ''" >
                salt = #{salt,jdbcType=VARCHAR},
            </if>
            <if test="status != null and status != ''" >
                status = #{status,jdbcType=VARCHAR},
            </if>
            <if test="username != null and username != ''" >
                username = #{username,jdbcType=VARCHAR},
            </if>
            <if test="orgId != null and orgId != ''" >
                org_id = #{orgId,jdbcType=BIGINT},
            </if>
            <if test="professionId != null and professionId != ''" >
                profession_id = #{professionId,jdbcType=BIGINT},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <resultMap id="UserPlainTextMap" type="org.gxz.znrl.entity.UserPlaintext" >
        <id column="ID" property="id" jdbcType="DECIMAL" />
        <result column="USERNAME" property="username" jdbcType="VARCHAR" />
        <result column="PASSWORD" property="password" jdbcType="VARCHAR" />
    </resultMap>

    <select id="getUserPlainTextByKey" resultMap="UserPlainTextMap" parameterType="java.lang.Long" >
        select
         ID,USERNAME,PASSWORD
        from SECURITY_USER_PLAINTEXT
        where ID = #{id,jdbcType=DECIMAL}
    </select>

    <update id="updateUserPlainTextByKey" parameterType="org.gxz.znrl.entity.UserPlaintext" >
        update SECURITY_USER_PLAINTEXT
        set USERNAME = #{username,jdbcType=VARCHAR},
          PASSWORD = #{password,jdbcType=VARCHAR}
        where ID = #{id,jdbcType=DECIMAL}
    </update>

    <update id="deleteUserByUserId" parameterType="org.gxz.znrl.entity.User">
		update security_user
		set status = #{status,jdbcType=VARCHAR}
		where id = #{id,jdbcType=BIGINT}
	</update>

    <resultMap id="roleResultMap" type="org.gxz.znrl.entity.Role" >
        <result column="id" property="id" jdbcType="BIGINT" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="description" property="description" jdbcType="VARCHAR" />
    </resultMap>

    <select id="qryRole" resultMap="roleResultMap" >
     select a.id, a.name, a.description from security_role a
    </select>

    <resultMap id="userRoleResultMap" type="org.gxz.znrl.entity.UserRole" >
        <result column="id" property="id" jdbcType="BIGINT" />
        <result column="priority" property="priority" jdbcType="BIGINT" />
        <result column="role_id" property="roleId" jdbcType="BIGINT" />
        <result column="user_id" property="userId" jdbcType="BIGINT" />
    </resultMap>

    <select id="qryUserRoleByUserId"  parameterType="java.lang.Long" resultMap="userRoleResultMap">
        select id, priority,role_id,user_id
        from security_user_role
        where user_id = #{userId,jdbcType=BIGINT}
    </select>

    <select id="qryRoleList"  parameterType="org.gxz.znrl.entity.newsystem.RoleEntity"  resultMap="roleResultMap">
        <include refid="paging_top_sql"/>
        select id,name,description, row_number() over(order by id desc) rownumber
        from SECURITY_ROLE
        where 1=1
        <if test="name != null">
            and name LIKE '%${name}%'
        </if>
        <if test="description != null">
            and description LIKE '%${description}%'
        </if>
        <include refid="paging_bottom_sql" />
    </select>

    <select id="qryRoleListCnt"  parameterType="org.gxz.znrl.entity.newsystem.RoleEntity"  resultType="java.lang.Integer">
        select count(1)
        from SECURITY_ROLE
        where 1=1
        <if test="name != null">
            and name LIKE '%${name}%'
        </if>
        <if test="description != null">
            and description LIKE '%${description}%'
        </if>

    </select>

    <select id="userListByRoleId"   parameterType="java.lang.Long" resultType="java.util.HashMap">
        select a.user_id userid
           from  SECURITY_USER_ROLE a
           left join  SECURITY_ROLE b
             on a.role_id = b.id
          where a.role_id = #{id,jdbcType=BIGINT}
    </select>

    <delete id="deleteRole" parameterType="java.lang.Long" >
        delete from security_role
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <select id="queryRoleByName" resultType="java.util.HashMap" parameterType="org.gxz.znrl.entity.Role">
        select  id  from SECURITY_ROLE where 1=1
         and  name  = #{name,jdbcType=VARCHAR}
    </select>

    <insert id="insertRole" parameterType="org.gxz.znrl.entity.Role">
	    INSERT INTO SECURITY_ROLE (
	        ID,
	        name,
	        description
	    ) VALUES (
	    	SEQ_ROLE_ID.NEXTVAL,
	    	#{name, jdbcType=VARCHAR},
	    	#{description, jdbcType=VARCHAR}
	    )
	</insert>

    <update id="updateRole" parameterType="org.gxz.znrl.entity.Role" >
        update security_role
        <set >
            <if test="description != null" >
                description = #{description,jdbcType=VARCHAR},
            </if>
            <if test="name != null" >
                name = #{name,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <select id="selectModuleList" resultType="org.gxz.znrl.entity.newsystem.TreeNode" >
        select a.id ,a.name text,a.parent_id parentId from
        (
        select * from SECURITY_module where id = '1'
        union all
        select * from security_module where parent_id = '1'
        union all
        select * from security_module where parent_id in
        (select id from security_module where parent_id = '1')
        ) a
        order by priority
    </select>

    <select id="selectOperateType" resultType="org.gxz.znrl.entity.newsystem.TreeNode">
        select 'n' as id,oper_desc as text,oper_code as textCode  from security_operation_type t order  by oper_id
    </select>

    <select id="selectModulePermByRoleid" parameterType="java.util.HashMap" resultType="org.gxz.znrl.entity.newsystem.TreeNode">
         select b.module_id parentId, a.permission_id id, b.oper_desc text,b.short_name textCode,'1' checked
           from SECURITY_ROLE_PERMISSION a
                 left join
                 (
                 select c.*,d.oper_desc from SECURITY_PERMISSION c left join security_operation_type d on c.short_name = d.oper_code
                 ) b on a.permission_id = b.id
          where a.role_id = #{roleId,jdbcType=BIGINT}
    </select>

    <select id="selectRoleAll" resultType="org.gxz.znrl.entity.newsystem.RoleEntity">
		select
			id ,
           description
		from
			security_role
        order by id
	</select>

    <select id="getRoleIdByUserId" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        select role_id,user_id from SECURITY_USER_ROLE where user_id = #{userId,jdbcType=BIGINT}
    </select>

    <select id="selectPermSequences" parameterType="java.lang.Integer" resultType="java.lang.Integer">
          select SEQ_PERMISSION_ID.nextval from dual connect by rownum <![CDATA[ <= ]]> #{count,jdbcType=BIGINT}
    </select>

    <delete id="deletePermModule" parameterType="java.lang.String" >
        delete from SECURITY_PERMISSION where id in (select PERMISSION_ID from SECURITY_ROLE_PERMISSION WHERE role_id = #{roleId,jdbcType=BIGINT} )
    </delete>

    <delete id="deletePermRole" parameterType="java.lang.String" >
        delete  from SECURITY_ROLE_PERMISSION WHERE role_id = #{roleId,jdbcType=BIGINT}
    </delete>

    <insert id="batchPermInsert" parameterType="java.util.List" useGeneratedKeys="false">
        INSERT INTO SECURITY_PERMISSION (
        ID,
        NAME,
        SHORT_NAME,
        MODULE_ID
        )

        <foreach collection="list" item="item" index="index"  separator="UNION ALL">
            SELECT
            #{item.id, jdbcType=DOUBLE},
            #{item.textCode, jdbcType=VARCHAR},
            #{item.textCode, jdbcType=VARCHAR},
            #{item.parentId, jdbcType=DOUBLE}
            FROM
            DUAL
        </foreach>

    </insert>

    <insert id="addPermRole" parameterType="java.util.List" useGeneratedKeys="false">
        INSERT INTO SECURITY_ROLE_PERMISSION (
        ID,
        PERMISSION_ID,
        ROLE_ID
        )
        SELECT  SEQ_ROLE_PERMISSION_ID.NEXTVAL,REC.* FROM (
        <foreach collection="list" item="item" index="index"  separator="UNION ALL">
            SELECT
            #{item.id, jdbcType=DOUBLE} PERM_ID,
            #{item.iconCls, jdbcType=DOUBLE} ROLE_ID
            FROM
            DUAL
        </foreach>
        ) REC
    </insert>
</mapper>